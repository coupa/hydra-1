# Coupa telegraf configuration.

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared to be active, either here or in the
# configuration snippets dropped in /etc/telegraf/telegraf.d/

# To deactivate a plugin, comment out the name and any variables.

# Global tags can be specified here in key="value" format. Note: the
# tag name has to be unique.
[global_tags]
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

  # basic system information: datacentre, region, availability zone,
  # environment, deployment, role
  dc = "aws"
  region = "$DEPLOYMENT_REGION"
  zone = "$DEPLOYMENT_ZONE"
  deployment = "aws-ecs"
  env = "$DEPLOYMENT_ENVIRONMENT"
  _db_name = "telegraf"

# configuration for telegraf agent itself
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = 256
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = 10240

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "1s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "15s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "5s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = "$TELEGRAF_HOSTNAME"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# none here â€“ configured completely via the recipe file and the
# 'add_output' stanzas.


# Input configuration, metrics common for all hosts go here. This is
# the very initial configuration and will change.

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## Comment this line if you want the raw CPU time metrics
  fielddrop = ["time_*"]


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points = ["/"]

  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  ## Uncomment the following line if you do not need disk serial numbers.
  skip_serial_number = true


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration


# Read metrics about network interface usage
[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  ##
  # interfaces = ["eth0"]


# # TCP or UDP 'ping' given url and collect response time in seconds
# [[inputs.net_response]]
#   ## Protocol, must be "tcp" or "udp"
#   protocol = "tcp"
#   ## Server address (default localhost)
#   address = "github.com:80"
#   ## Set timeout
#   timeout = "1s"
#
#   ## Optional string sent to the server
#   # send = "ssh"
#   ## Optional expected string in answer
#   # expect = "ssh"
#   ## Set read timeout (only used if expecting a response)
#   read_timeout = "1s"


# Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]
  # no configuration

[[inputs.statsd]]
  service_address = ":8125"
  delete_gauges = false
  delete_counters = true
  delete_sets = false
  delete_timings = true
  percentiles = [90, 70, 50]

  parse_data_dog_tags = true

  metric_separator = "."
  templates = [
    "*./.* instance_name..measurement*",
    "*.*./.* instance_name.instance_name..measurement*",
    "*.*.*./.* instance_name.instance_name.instance_name..measurement*",
    "*.*.*.*./.* instance_name.instance_name.instance_name.instance_name..measurement*"
  ]

  [inputs.statsd.tags]
  # not needed for default database
    _db_name = "$INFLUXDB_DATABASE_NAME"
    metric_type = "application"

# all metrics sent via this output will be written in
# the telegraf_app_metrics database
[[outputs.influxdb]]
  urls = ["$INFLUXDB_HOST"]
  database = "$INFLUXDB_DATABASE_NAME" # required
  precision = "s"

  retention_policy = "default"
  write_consistency = "any"
  timeout = "60s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  # user_agent = "telegraf"

  ## Optional SSL Config
  ssl_ca = "/etc/telegraf/ca.pem"
  # insecure_skip_verify = false
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"

  # include some identification in the sent data
  user_agent = "telegraf/app_metrics [db: $INFLUXDB_DATABASE_NAME, host: $TELEGRAF_HOSTNAME]"

  # remove unnecessary tags from output
  tagexclude = ["_db_name"]

  # accept only data for the telegraf_app_metrics database
  [outputs.influxdb.tagpass]
    _db_name = ["$INFLUXDB_DATABASE_NAME"]
